<?php

require("ecdsa_php");


$success = 0;
$failure = 0;

function assertEqual($a, $b) {
    if ($a != $b) {
        $failure ++;
        echo "      FAIL: " . $a . " != " . $b;
    } else {
        $success ++;
        echo "      success";
    }
}

function header($text) {
    echo "\n  " . $text . " test:";
}

function subHeader($text) {
    echo "    " . $text . ":";
}


echo "\n\nRunning ECDSA-Ruby tests:";

header("ECDSA");

subHeader("testVerifyRightMessage");
$privateKey = new PrivateKey;
$publicKey = $privateKey->publicKey();
$message = "This is the right message";
$signature = Ecdsa::sign($message, $privateKey);
assertEqual(Ecdsa::verify($message, $signature, $publicKey), true);

subHeader("testVerifyWrongMessage");
$privateKey = new PrivateKey;
$publicKey = $privateKey->publicKey();
$message1 = "This is the right message";
$message2 = "This is the wrong message";
$signature = Ecdsa::sign($message1, $privateKey);
assertEqual(Ecdsa::verify($message2, $signature, $publicKey), false);


header("openSSL");

subHeader("testAssign");
// Generated by: openssl ecparam -name secp256k1 -genkey -out privateKey.pem
$privateKeyPem = File::read("test/privateKey.pem");
$privateKey = PrivateKey::fromPem($privateKeyPem);
$message = File::read("test/message.txt");
$signature = Ecdsa::sign($message, $privateKey);
$publicKey = $privateKey->publicKey();
assertEqual(Ecdsa::verify($message, $signature, $publicKey), true);

subHeader("testVerifySignature");
// openssl ec -in privateKey.pem -pubout -out publicKey.pem
$publicKeyPem = File::read("test/publicKey.pem");
// openssl dgst -sha256 -sign privateKey.pem -out signature.binary message.txt
$signatureDer = File::read("test/signatureDer.txt", "binary");
$message = File::read("test/message.txt");
$publicKey = $PublicKey.fromPem($publicKeyPem);
$signature = $Signature.fromDer($signatureDer);
assertEqual(Ecdsa::verify($message, $signature, $publicKey), true);


header("PrivateKey");

subHeader("testPemConversion");
$privateKey1 = new PrivateKey;
$pem = $privateKey1->toPem();
$privateKey2 = PrivateKey::fromPem($pem);
assertEqual($privateKey1->toPem, $privateKey2->toPem);

subHeader("testDerConversion");
$privateKey1 = new PrivateKey;
$der = $privateKey1->toDer();
$privateKey2 = PrivateKey::fromDer($der);
assertEqual($privateKey1->toPem(), $privateKey2->toPem());

subHeader("testStringConversion");
$privateKey1 = new PrivateKey;
$str = $privateKey1->toString();
$privateKey2 = PrivateKey::fromString($str);
assertEqual($privateKey1->toPem(), $privateKey2->toPem());


header("PublicKey");

subHeader("testPemConversion");
$privateKey = new PrivateKey;
$publicKey1 = $privateKey->publicKey();
$pem = $publicKey1->toPem();
$publicKey2 = PublicKey::fromPem($pem);
assertEqual($publicKey1->toPem(), $publicKey2->toPem());

subHeader("testDerConversion");
$privateKey = new PrivateKey;
$publicKey1 = $privateKey.publicKey();
$der = $publicKey1->toDer();
$publicKey2 = PublicKey::fromDer($der);
assertEqual($publicKey1->toPem(), $publicKey2->toPem());


subHeader("testStringConversion");
$privateKey = new PrivateKey;
$publicKey1 = $privateKey->publicKey();
$str = $publicKey1->toString();
$publicKey2 = PublicKey::fromString($str);
assertEqual($publicKey1->toPem, $publicKey2->toPem);


header("Signature");

subHeader("testDerConversion");
$privateKey = new PrivateKey;
$message = "This is a text message";
$signature1 = Ecdsa::sign($message, $privateKey);
$der = $signature1->toDer();
$signature2 = Signature::fromDer($der);
assertEqual($signature1->r, $signature2->r);
assertEqual($signature1->s, $signature2->s);

subHeader("testBase64Conversion");
$privateKey = new PrivateKey;
$message = "This is a text message";
$signature1 = Ecdsa::sign($message, $privateKey);
$base64 = $signature1->toBase64();
$signature2 = Signature::fromBase64($base64);
assertEqual($signature1->r, $signature2->r);
assertEqual($signature1->s, $signature2->s);


if ($failure == 0) {
    echo "\n\nALL " . $success . " TESTS SUCCESSFUL\n\n";
} else {
    echo "\n\n" . $failure . "/" . ($failure + $success) . " FAILURES OCCURRED\n\n";
}

?>